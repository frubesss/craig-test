name: Deploy PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build
      run: |
        # Update homepage for preview deployment
        npm run build
        
    - name: Install Surge CLI
      run: npm install -g surge
      
    - name: Deploy to Surge
      run: |
        export SURGE_DOMAIN="pr-${{ github.event.number }}-craig-test.surge.sh"
        surge ./build $SURGE_DOMAIN --token ${{ secrets.SURGE_TOKEN }}
        echo "PREVIEW_URL=https://$SURGE_DOMAIN" >> $GITHUB_ENV
      env:
        SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
        
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const url = process.env.PREVIEW_URL;
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Preview deployment')
          );
          
          const body = `## ðŸš€ Preview deployment
          
          Your changes have been deployed to a preview environment:
          
          **Preview URL:** ${url}
          
          This preview will be updated automatically when you push new changes to this PR.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }